/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobService } from "../job.service";
import { JobCreateInput } from "./JobCreateInput";
import { Job } from "./Job";
import { JobFindManyArgs } from "./JobFindManyArgs";
import { JobWhereUniqueInput } from "./JobWhereUniqueInput";
import { JobUpdateInput } from "./JobUpdateInput";
import { BidFindManyArgs } from "../../bid/base/BidFindManyArgs";
import { Bid } from "../../bid/base/Bid";
import { BidWhereUniqueInput } from "../../bid/base/BidWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { UserFindUniqueArgs } from "../../user/base/UserFindUniqueArgs";

export class JobControllerBase {
  constructor(protected readonly service: JobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Job })
  async createJob(@common.Body() data: JobCreateInput): Promise<Job> {
    return await this.service.createJob({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        deadline: true,
        budget: true,
        client: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Job] })
  @ApiNestedQuery(JobFindManyArgs)
  async jobs(@common.Req() request: Request): Promise<Job[]> {
    const args = plainToClass(JobFindManyArgs, request.query);
    return this.service.jobs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        deadline: true,
        budget: true,
        client: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Job })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async job(@common.Param() params: JobWhereUniqueInput): Promise<Job | null> {
    const result = await this.service.job({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        deadline: true,
        budget: true,
        client: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Job })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJob(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() data: JobUpdateInput
  ): Promise<Job | null> {
    try {
      return await this.service.updateJob({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          deadline: true,
          budget: true,
          client: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Job })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJob(
    @common.Param() params: JobWhereUniqueInput
  ): Promise<Job | null> {
    try {
      return await this.service.deleteJob({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          deadline: true,
          budget: true,
          client: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bids")
  @ApiNestedQuery(BidFindManyArgs)
  async findBids(
    @common.Req() request: Request,
    @common.Param() params: JobWhereUniqueInput
  ): Promise<Bid[]> {
    const query = plainToClass(BidFindManyArgs, request.query);
    const results = await this.service.findBids(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        message: true,
        freelancer: true,

        job: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bids")
  async connectBids(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: BidWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bids: {
        connect: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bids")
  async updateBids(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: BidWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bids: {
        set: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bids")
  async disconnectBids(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: BidWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bids: {
        disconnect: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: JobWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        status: true,
        freelancer: true,

        job: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  async connectPayments(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  async updatePayments(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  async disconnectPayments(
    @common.Param() params: JobWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateJob({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/admin/manage-job")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AdminManageJob(
    @common.Body()
    body: UserFindUniqueArgs
  ): Promise<string> {
    return this.service.AdminManageJob(body);
  }

  @common.Put("/editor/manage-job")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async EditorManageJob(
    @common.Body()
    body: UserFindUniqueArgs
  ): Promise<string> {
    return this.service.EditorManageJob(body);
  }

  @common.Post("/user/manage-job")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UserManageJob(
    @common.Body()
    body: UserFindUniqueArgs
  ): Promise<string> {
    return this.service.UserManageJob(body);
  }
}
