/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Job as PrismaJob,
  Bid as PrismaBid,
  Payment as PrismaPayment,
} from "@prisma/client";
import { UserFindUniqueArgs } from "../../user/base/UserFindUniqueArgs";

export class JobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.JobCountArgs, "select">): Promise<number> {
    return this.prisma.job.count(args);
  }

  async jobs(args: Prisma.JobFindManyArgs): Promise<PrismaJob[]> {
    return this.prisma.job.findMany(args);
  }
  async job(args: Prisma.JobFindUniqueArgs): Promise<PrismaJob | null> {
    return this.prisma.job.findUnique(args);
  }
  async createJob(args: Prisma.JobCreateArgs): Promise<PrismaJob> {
    return this.prisma.job.create(args);
  }
  async updateJob(args: Prisma.JobUpdateArgs): Promise<PrismaJob> {
    return this.prisma.job.update(args);
  }
  async deleteJob(args: Prisma.JobDeleteArgs): Promise<PrismaJob> {
    return this.prisma.job.delete(args);
  }

  async findBids(
    parentId: string,
    args: Prisma.BidFindManyArgs
  ): Promise<PrismaBid[]> {
    return this.prisma.job
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bids(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.job
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
  async AdminManageJob(args: UserFindUniqueArgs): Promise<string> {
    throw new Error("Not implemented");
  }
  async EditorManageJob(args: UserFindUniqueArgs): Promise<string> {
    throw new Error("Not implemented");
  }
  async UserManageJob(args: UserFindUniqueArgs): Promise<string> {
    throw new Error("Not implemented");
  }
}
